{"version":3,"sources":["assets/TrashIcon.svg","assets/trashicongrey.svg","assets/NewEngen-Logo.svg","assets/CartIcon.svg","components/list-item/list-item.tsx","components/list/list.tsx","service/local-storage-service.ts","service/color-service.ts","components/list-container/list-container.tsx","components/palette/palette.tsx","components/save-palette/save-palette.tsx","components/cart/cart.tsx","components/cart-container/cart-container.tsx","components/header/header.tsx","components/app/App.tsx","index.tsx"],"names":["module","exports","ListItem","props","removeOrAddToCart","selectable","updateCart","color","state","selected","setState","removeFromCart","className","this","removable","style","backgroundColor","onClick","src","trashIcon","alt","React","List","componentDidUpdate","oldProps","newProps","colors","cart","setupSelectedColors","colorsToSetup","includes","push","value","adding","addToCart","updatedCart","index","indexOf","splice","getColors","map","item","i","key","Component","LocalStorageService","setItemFromArray","arrayAsString","join","localStorage","setItem","getItemAsArray","storedStringAsArray","storedString","getItem","split","setItemAsJSON","JSON","stringify","getItemFromJSON","parse","ColorService","fetch","then","res","json","ListContainer","result","length","concat","updateCartCount","getCart","render","Palette","removePalette","id","getTitleAndLength","title","removeDiv","updatable","SavePalette","addPalette","updateTitle","event","target","onChange","placeholder","Cart","palettes","updatePalettes","newPalette","paletteIndex","palette","CartContainer","getPalettes","Header","to","logo","cartCount","cartIcon","App","count","getCartCount","exact","path","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.872b3ca3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/TrashIcon.6068cc1f.svg\";","module.exports = __webpack_public_path__ + \"static/media/trashicongrey.e7fe9cbb.svg\";","module.exports = __webpack_public_path__ + \"static/media/NewEngen-Logo.56b04b4c.svg\";","module.exports = __webpack_public_path__ + \"static/media/CartIcon.39a60626.svg\";","import * as React from 'react';\r\nimport './list-item.css';\r\nimport trashIcon from '../../assets/TrashIcon.svg';\r\n\r\ninterface ListItemProps {\r\n    color: string;\r\n    updateCart: Function;\r\n    selected?: boolean;\r\n    selectable?: boolean;\r\n    removable?: boolean;\r\n} \r\n\r\ninterface ListItemState {\r\n    selected: boolean;\r\n}\r\n\r\nclass ListItem extends React.Component<ListItemProps, ListItemState> {\r\n    constructor(props: ListItemProps) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            selected: this.props.selected ? true : false\r\n        }\r\n    }\r\n\r\n    removeOrAddToCart = () => {\r\n        if (!this.props.selectable || !this.props.updateCart) {\r\n            return;\r\n        }\r\n\r\n        this.props.updateCart(this.props.color, !this.state.selected);\r\n        this.setState({ selected: !this.state.selected });\r\n    }\r\n\r\n    removeFromCart = () => {\r\n        if (!this.props.updateCart) {\r\n            return;\r\n        }\r\n\r\n        this.props.updateCart(this.props.color);\r\n        this.setState({ selected: false });\r\n    }\r\n\r\n    render() {\r\n        let className = 'list-item';\r\n        if (this.props.selectable) {\r\n            className = className + ' list-item-selectable';\r\n        }\r\n        if (this.state.selected) {\r\n            className = className + ' list-item-selected';\r\n        }\r\n        if (this.props.removable) {\r\n            className = className + ' list-item-removable';\r\n        }\r\n        \r\n        return (\r\n            <div className={className} \r\n                style={{backgroundColor: this.props.color}}\r\n                onClick={this.removeOrAddToCart}>\r\n                <span className=\"list-item-name\">\r\n                    {this.props.color}\r\n                </span>\r\n                <img src={trashIcon} className=\"list-item-trash-icon\" alt=\"trash-can\" onClick={this.removeFromCart}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListItem;\r\n","import React from 'react';\r\nimport ListItem from '../list-item/list-item';\r\nimport './list.css';\r\n\r\ninterface ListProps {\r\n    updateCart: Function;\r\n    getColors: Function;\r\n    cart: string[];\r\n    colors: string[];\r\n}\r\n\r\ninterface ListState {\r\n    cart: string[];\r\n    colors: Color[];\r\n}\r\n\r\ninterface Color {\r\n    color: string;\r\n    selected: boolean;\r\n}\r\n\r\nclass List extends React.Component<ListProps, ListState> {\r\n    constructor(props: ListProps) {\r\n        super(props);\r\n        this.state = {\r\n            cart: this.props.cart,\r\n            colors: this.setupSelectedColors(this.props.colors)\r\n        }\r\n    }\r\n\r\n    componentDidUpdate = (oldProps: ListProps) => {\r\n        const newProps = this.props;\r\n        if(oldProps.colors !== newProps.colors) {\r\n          this.setState({\r\n              cart: this.props.cart,\r\n              colors: this.setupSelectedColors(this.props.colors)\r\n          })\r\n        }\r\n    }\r\n    \r\n    setupSelectedColors = (colorsToSetup: string[]) => {\r\n        let colors: Color[] = [];\r\n        for (let color of colorsToSetup) {\r\n            if (this.props.cart.includes(color)) {\r\n                colors.push({color: color, selected: true});\r\n            } else {\r\n                colors.push({color: color, selected: false});\r\n            }\r\n        }\r\n\r\n        return colors;\r\n    }\r\n\r\n    updateCart = (value: string, adding: boolean) => {\r\n        if (adding) {\r\n            this.addToCart(value);\r\n        } else {\r\n            this.removeFromCart(value);\r\n        }\r\n    }\r\n\r\n    addToCart = (value: string) => {\r\n        if (this.state.cart.includes(value)) {\r\n            return;\r\n        }   \r\n        \r\n        let updatedCart = this.state.cart;\r\n        updatedCart.push(value);\r\n\r\n        this.setState({ cart: updatedCart });\r\n        this.props.updateCart(this.state.cart);\r\n    }\r\n\r\n    removeFromCart = (value: string) => {\r\n        let index = this.state.cart.indexOf(value);\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n\r\n        let updatedCart = this.state.cart;\r\n        updatedCart.splice(index, 1);\r\n\r\n        this.setState({ cart: updatedCart });\r\n        this.props.updateCart(this.state.cart);\r\n    }\r\n\r\n    getColors = () => {\r\n        this.props.getColors();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"list\">\r\n                <div className=\"list-items\">\r\n                    {this.state.colors.map((item, i) => {\r\n                        return <ListItem key={i} color={item.color} selectable={true} selected={item.selected} updateCart={this.updateCart}/>\r\n                    })}\r\n                </div>\r\n\r\n                <button className=\"button-load\" onClick={this.getColors}>Load More</button>\r\n            </div>\r\n          );\r\n    }\r\n}\r\n\r\nexport default List;\r\n","import { IPalette } from \"../components/cart-container/cart-container\";\r\n\r\nclass LocalStorageService {\r\n    static setItemFromArray = (key: string, value: string[]) => {\r\n        let arrayAsString = value.join(',');\r\n\r\n        localStorage.setItem(key, arrayAsString);\r\n    }\r\n\r\n    static getItemAsArray = (key: string): string[] => {\r\n        let storedStringAsArray: any[] = [];\r\n        let storedString = localStorage.getItem(key);\r\n        \r\n        if (storedString) {\r\n            storedStringAsArray = storedString.split(',');\r\n        }\r\n\r\n\r\n        return storedStringAsArray;\r\n    }\r\n\r\n    static setItemAsJSON = (key: string, value: IPalette[]) => {\r\n        localStorage.setItem(key, JSON.stringify(value));\r\n    }\r\n\r\n    static getItemFromJSON = (key: string): IPalette[] => {\r\n        return JSON.parse(localStorage.getItem(key) || \"[]\");\r\n    }\r\n}\r\n\r\nexport default LocalStorageService;\r\n","class ColorService {\r\n    static getColors = () => {\r\n        return fetch('http://157.245.210.243:3001/colors').then((res => res.json()));\r\n    }\r\n}\r\n\r\nexport default ColorService;","import * as React from 'react';\r\nimport List from '../list/list';\r\nimport LocalStorageService from '../../service/local-storage-service';\r\nimport ColorService from '../../service/color-service';\r\n\r\ninterface ListContainerProps {\r\n    updateCartCount: Function;\r\n}\r\n\r\ninterface ListContainerState {\r\n    colors: string[];\r\n}\r\n\r\nclass ListContainer extends React.Component<ListContainerProps, ListContainerState> {\r\n    constructor(props: ListContainerProps) {\r\n        super(props);\r\n        this.state = {\r\n            colors: []\r\n        };\r\n        this.getColors();\r\n    }\r\n\r\n    getColors = () => {\r\n        ColorService.getColors().then((result) => {\r\n            let colors: string[] = this.state.colors || [];\r\n\r\n            // find and remove duplicates if they exist\r\n            for (let i = 0; i < result.length; i++) {\r\n                if (colors.includes(result[i])) {\r\n                    result.splice(i, 1);\r\n                }\r\n            }\r\n\r\n            this.setState({colors: colors.concat(result)});\r\n        });\r\n    }\r\n\r\n    updateCart = (cart: string[]) => {\r\n        LocalStorageService.setItemFromArray('cart', cart);\r\n        this.props.updateCartCount(cart.length);\r\n    }\r\n\r\n    getCart = (): string[] => {\r\n        return LocalStorageService.getItemAsArray('cart');\r\n    }\r\n\r\n    render = () => {\r\n        if (!this.state.colors || this.state.colors.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <List updateCart={this.updateCart} cart={this.getCart()} colors={this.state.colors} getColors={this.getColors}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListContainer;\r\n","import * as React from 'react';\r\nimport ListItem from '../list-item/list-item';\r\nimport trashIcon from '../../assets/trashicongrey.svg';\r\nimport './palette.css';\r\n\r\ninterface PaletteProps {\r\n    colors: string[];\r\n    id?: number;\r\n    removePalette?: Function;\r\n    updatable?: boolean;\r\n    updateCart?: Function;\r\n    title?: string;\r\n} \r\n\r\ninterface PaletteState {\r\n    selected: boolean;\r\n}\r\n\r\nclass Palette extends React.Component<PaletteProps, PaletteState> {\r\n    removePalette = () => {\r\n        if (!this.props.removePalette) {\r\n            return;\r\n        }\r\n\r\n        this.props.removePalette(this.props.id);\r\n    }\r\n\r\n    getTitleAndLength = (): string => {\r\n        let title = '';\r\n        if (this.props.title) {\r\n            title = this.props.title  + ' - ' + this.props.colors.length;\r\n            if (this.props.colors.length === 1) {\r\n                title = title + ' color';\r\n            } else {\r\n                title = title + ' colors';\r\n            }\r\n        }\r\n\r\n        return title;\r\n    }\r\n\r\n    updateCart = (color: string) => {\r\n        if (this.props.updateCart) {\r\n            this.props.updateCart(color);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let removeDiv;\r\n\r\n        if (!this.props.updatable) {\r\n            removeDiv = <div className=\"palette-remove\" onClick={this.removePalette}><img src={trashIcon} alt=\"trash-can\" className=\"palette-remove-trash-icon\"/></div>\r\n        }\r\n\r\n        return (\r\n            <div className=\"palette\">\r\n                <p className=\"palette-title\">{this.getTitleAndLength()}</p>\r\n\r\n                <div className=\"palette-container\">\r\n                    {this.props.colors.map((value, i) => {\r\n                        return <ListItem key={i} color={value} updateCart={this.updateCart} removable={this.props.updatable ? true : false}/>\r\n                    })}\r\n\r\n                    {removeDiv}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Palette;\r\n","import * as React from 'react';\r\nimport './save-palette.css';\r\n\r\ninterface SavePaletteProps {\r\n    addPalette: Function\r\n} \r\n\r\ninterface SavePaletteState {\r\n    title: string\r\n} \r\n\r\nclass SavePalette extends React.Component<SavePaletteProps, SavePaletteState> {\r\n    constructor(props: SavePaletteProps) {\r\n        super(props);\r\n        this.state = {\r\n            title: ''\r\n        }\r\n    }\r\n\r\n    addPalette = () => {\r\n        this.props.addPalette(this.state.title);\r\n        this.setState({\r\n            title: ''\r\n        });\r\n    }\r\n\r\n    updateTitle = (event: any) => {\r\n        this.setState({title: event.target.value});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"save-palette\">\r\n                <p className=\"text-save-palette\">Name and save your color palette</p>\r\n                <input className=\"input-save-palette\" value={this.state.title} onChange={this.updateTitle} placeholder=\"Color palette name\"/>\r\n                <button className=\"button-save-palette\" onClick={this.addPalette}>Save Palette</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default SavePalette;\r\n","import React from 'react';\r\nimport Palette from '../palette/palette';\r\nimport SavePalette from '../save-palette/save-palette';\r\nimport './cart.css';\r\nimport { IPalette } from '../cart-container/cart-container';\r\n\r\ninterface CartProps {\r\n    updateCart: Function;\r\n    addPalette: Function;\r\n    updatePalettes: Function;\r\n    cart: string[];\r\n    palettes: IPalette[];\r\n}\r\n\r\ninterface CartState {\r\n    cart: string[];\r\n    palettes: IPalette[];\r\n    paletteIndex: number;\r\n}\r\n\r\ninterface Color {\r\n    color: string;\r\n    selected: boolean;\r\n}\r\n\r\nclass Cart extends React.Component<CartProps, CartState> {\r\n    constructor(props: CartProps) {\r\n        super(props);\r\n\r\n        let paletteIndex = 0;\r\n        for (let palette of this.props.palettes) {\r\n            if (paletteIndex < palette.id) {\r\n                paletteIndex = palette.id;\r\n            }\r\n        }\r\n\r\n        this.state = {\r\n            cart: this.props.cart,\r\n            palettes: this.props.palettes,\r\n            paletteIndex: paletteIndex\r\n        }\r\n    }\r\n\r\n    removePalette = (id: number) => {\r\n        let palettes = this.state.palettes;\r\n        let index = 0;\r\n        for (let palette of palettes) {\r\n            if (id === palette.id) {\r\n                palettes.splice(index, 1);\r\n                break;\r\n            }\r\n            index = index + 1;\r\n        }\r\n\r\n        this.props.updatePalettes(palettes);\r\n        this.setState({\r\n            cart: this.state.cart,\r\n            palettes: this.state.palettes\r\n        });\r\n    }\r\n\r\n    addPalette = (title: string) => {\r\n        if (this.state.cart.length === 0) {\r\n            return;\r\n        }\r\n        let newPalette = {title: title, colors: this.state.cart, id: this.state.paletteIndex + 1};\r\n        this.setState({\r\n            cart: [],\r\n            palettes: this.state.palettes.concat(newPalette),\r\n            paletteIndex: this.state.paletteIndex + 1\r\n        });\r\n        this.props.addPalette(newPalette);\r\n        this.props.updateCart([]);\r\n    }\r\n\r\n    updateCart = (value: string) => {\r\n        this.removeFromCart(value);\r\n    }\r\n\r\n    removeFromCart = (value: string) => {\r\n        let index = this.state.cart.indexOf(value);\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n\r\n        let updatedCart = this.state.cart;\r\n        updatedCart.splice(index, 1);\r\n\r\n        this.setState({cart: updatedCart});\r\n        this.props.updateCart(this.state.cart);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"cart\">\r\n                <div className=\"cart-current\">\r\n                    <h2 className=\"cart-heading\">\r\n                        Your current color cart palette\r\n                    </h2>\r\n                    <Palette colors={this.state.cart} updatable={true} updateCart={this.updateCart}/>\r\n                    <SavePalette addPalette={this.addPalette}/>\r\n                </div>\r\n\r\n                <div className=\"cart-divider\">\r\n                </div>\r\n\r\n                <div className=\"cart-previous\">\r\n                    <h2 className=\"cart-heading\">\r\n                        Previously saved color palettes\r\n                    </h2>\r\n\r\n                    {this.state.palettes.map((palette, i) => {\r\n                        return <Palette key={i} id={palette.id} colors={palette.colors} title={palette.title} removePalette={this.removePalette}/>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Cart;\r\n","import * as React from 'react';\r\nimport Cart from '../cart/cart';\r\nimport LocalStorageService from '../../service/local-storage-service';\r\n\r\nexport interface IPalette {\r\n    title: string;\r\n    colors: string[];\r\n    id: number;\r\n}\r\n\r\ninterface CartContainerProps {\r\n    updateCartCount: Function;\r\n}\r\n\r\nclass CartContainer extends React.Component<CartContainerProps> {\r\n    updateCart = (cart: string[]) => {\r\n        LocalStorageService.setItemFromArray('cart', cart);\r\n        this.props.updateCartCount(cart.length);\r\n    }\r\n\r\n    getCart = (): string[] => {\r\n        return LocalStorageService.getItemAsArray('cart');\r\n    }\r\n\r\n    getPalettes = (): IPalette[] => {\r\n        return LocalStorageService.getItemFromJSON('palettes');\r\n    }\r\n\r\n    addPalette = (palette: IPalette) => {\r\n        let palettes = this.getPalettes();\r\n        palettes.push(palette);\r\n        LocalStorageService.setItemAsJSON('palettes', palettes);\r\n    }\r\n\r\n    updatePalettes = (palettes: IPalette[]) => {\r\n        LocalStorageService.setItemAsJSON('palettes', palettes);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Cart updateCart={this.updateCart} cart={this.getCart()} palettes={this.getPalettes()} addPalette={this.addPalette} updatePalettes={this.updatePalettes}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CartContainer;\r\n\r\n\r\n","import React from 'react';\r\nimport logo from '../../assets/NewEngen-Logo.svg';\r\nimport cartIcon from '../../assets/CartIcon.svg';\r\nimport './header.css';\r\nimport { BrowserRouter as Route, Link } from \"react-router-dom\";\r\n\r\ninterface HeaderProps {\r\n    cartCount: number;\r\n}\r\n\r\nclass Header extends React.Component<HeaderProps> {\r\n    render() {\r\n        return (\r\n            <header className=\"header\">\r\n                <div className=\"header-icons\">\r\n                    <Link to=\"/\" className=\"anchor\">\r\n                        <img src={logo} alt=\"logo\" />\r\n                    </Link>\r\n                    <Link to=\"/cart\" className=\"anchor anchor-cart-icon\">\r\n                        <span className=\"cart-count\">{this.props.cartCount} </span>               \r\n                        <img src={cartIcon} alt=\"cart icon\" />\r\n                    </Link>\r\n                </div>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\nimport './App.css';\nimport ListContainer from '../list-container/list-container';\nimport CartContainer from '../cart-container/cart-container';\nimport Header from '../header/header';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport LocalStorageService from '../../service/local-storage-service';\n\ninterface AppProps {\n}\n\ninterface AppState {\n  cartCount: number;\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      cartCount: this.getCartCount()\n    }\n  }\n\n  updateCartCount = (count: number) => {\n    this.setState({cartCount: count});\n  }\n\n  getCartCount = (): number => {\n    return LocalStorageService.getItemAsArray('cart').length;\n  }\n\n  render() {\n      return (\n        <Router>\n            <div className=\"app\">\n                <Header cartCount={this.state.cartCount}/>\n            </div>\n\n            <div className=\"app-container\">\n                <Route exact path=\"/\" render={(props) => <ListContainer {...props} updateCartCount={this.updateCartCount} />} />\n                <Route path=\"/cart\" render={(props) => <CartContainer {...props} updateCartCount={this.updateCartCount} />}  />\n            </div>\n        </Router>\n      );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}